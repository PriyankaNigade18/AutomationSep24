
27-09-2024
===================
Selenium WebDriver
========================
It is an interface
It is an API for WebUI automation testing

WebDriver Setup In Java Project
===================================
1.Create new java project
2.Download selenium client library for selenium.dev site
3.Add it to eclipse
4.right click on Project-->Build path--->configure build path-->
libraries-->class path--->add external library-->add JAR(executable file)

WebDriver setup In Maven
=============================
What is Maven
================
It is project /build management tool

POM.xml file
=================
Project object Model 
this file is configuration file where entire project setup we can do

1.dependencies(executable file/library)
2.plugins


Maven Repository
==================
1.Local Repository: users/.m2 folder
2.Remote/central repository
https://mvnrepository.com/

=============================================================
TestCase:validate Google application title as Google
Step1: Open Browser with Google application
Step2: Get the actual title of application
Step3: Compare with expected title
Step4: As per comparison display Valid message 
Step5: Close the browser

Webdriver Browser based commands
======================================
1.get(url)
2.getTitle()
3.getCurrentUrl()
4.getPageSource()
5.close(): close the current/active window of browser
6.quit(): close all open window by selenium
7.getWindowHandle()
8.getWindowHandles()

Selenium Exceptions
==================
1.InvalidArgumentException: invalid argument= wrong url address


WebDriver Navigation commands
===================================
Selenium Provides Navigation interface

driver.navigate():Navigate interface object

1.to(url): navigate to new url /app
--------------------------------------
driver.navigate().to(url)

2.back()
---------------------------------
driver.navaigate().back()

3.forward()
----------------------------
driver.navigate().forward()

4.refresh()
-------------------------------
driver.navigate().refresh()

========================================================
How to automate any webelement?
=================================
Step1:Get the address of webelement from web page & identify webelement
Step2: perform actions on that webelement

 
What is WebElement?
==========================
In general all WEBUI called webelement.
example:
textbox,searchbox,dropdown,link,button,checkbox...etc

In Selenium WebElement is interface

Step1:Get the address of webelement from web page & identify webelement
------------------------------------------------------------------------
In selenium we can find the address of webelement using Locator

What is Locators:
---------------------
Address of  a webelement from webpage

Selenium Support total 8 locators
====================================
1.By id
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic 
------------
7.By cssSelector
8.By xpath

What is By?
----------------
By is class in selenium to get the locators

In selenium to identify any webelement
==========================================
1.findElement()
---------------------
- this method identifies one single webelement
- this method return WebElement interface object
- this method throws the exception NoSuchElementException if element not found 

2.findElements()
---------------------
- this method identifies multiple weblements
- this method return List<Webelement>
- this method never throws any exception if element not found 

===============================================
Element validation methods
================================
1.isDisplayed()
2.isEnabled()
3.isSelected()

Actions
====================
textbox,searchbox--->pass data--->sendKeys("data",Keys.Keyboard key)
button,link,checkbox,radio button--->click---->click()
to clear the text written---->clear()

============================================
How to automate any hyperlink/link
====================================
<a href="https://www.google.com"> Google App </a>
		<a>                      link text </a>
1.linkText()-full text
------------------------------------------
driver.findElement(By.linkText("Google App"))

2.partialLinkText() -partial match
--------------------------------------
driver.findElement(By.partialLinkText("App"))




---------------------
3-10-2024
==================
Synchronization Issue in Selenium
=======================================
Time mapping issue between tool and application

Selenium Provides Dynamic wait
======================================
1.Implicit
================
- It is global wait
applicable to all webelements from script
driver.manage().timeouts().implicitlyWait(Duration.ofseconds(10));



2.Explicit
=================
- It is applicable to single webelement as per there condition

1.WebDriverWait class
2.FluentWait Class
==================================================
By className
==========================
InvalidSelectorException: Compound class names not permitted

class="oxd-button oxd-button--medium oxd-button--main orangehrm-login-button"

		class1       class2             class3           class4
		
Identify class name which match to the element and use the same

================================================================
By tagName
=================

Number of images
Number of input boxes
Number of Links 

findElements()

==================================
WebElement Method
=================
1.getText()
==================
- to get the text of any element we use this method
<tagname>text</tagname>
- html inner text also we can find out using getText()


2.getAttribute(attribute)
==================
This method return value for that attribute
==========================================================
Dynamic Locators
=====================
1.By cssSelector
2.By xpath

cssSelector
==================
What is Css?
---------------------
It is cascaded style sheet language for webpage to provide styles to the webelement


what is cssSelector?
=========================
It is locator to locate the webelement based on there css properties
-cssSelector is faster than xpath(as we can travel only in one direction Parent--->child)
-cssSelector not support any method
-cssSelector not support axies

1.tagname with id
=========================
Syntax:
=============
tagname#id

<input id="user-name">

input#user-name

2.tagname with attribute
==========================
syntax:
=======
tagname[attribute='value']

<input placeholder="Password">
input[placeholder='Password']

3.tagname with className
===============================
Syntax:
===========
tagname.className

<input type="submit" class="btn_action" id="login-button" value="LOGIN">

input.btn_action

4.tagname with id,classname,attribute
==================================
Syntax:
=============
tagname#id.classname[attribute='value']

<input type="submit" class="btn_action" id="login-button" value="LOGIN">

input#login-button.btn_action[value='LOGIN']

cssSelectors pattern
=============
* contains-partail match
=====================

Syntax:
=============
tagname[attribute *='partial value']

placeholder="Username"

input[placeholder *='User']
input[placeholder *='name']

^ startswith(prefix)
==================
input[placeholder ^='User']

$ endswith(suffix)
=================
input[placeholder $='name']












































































































