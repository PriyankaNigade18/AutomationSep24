
27-09-2024
===================
Selenium WebDriver
========================
It is an interface
It is an API for WebUI automation testing

WebDriver Setup In Java Project
===================================
1.Create new java project
2.Download selenium client library for selenium.dev site
3.Add it to eclipse
4.right click on Project-->Build path--->configure build path-->
libraries-->class path--->add external library-->add JAR(executable file)

WebDriver setup In Maven
=============================
What is Maven
================
It is project /build management tool

POM.xml file
=================
Project object Model 
this file is configuration file where entire project setup we can do

1.dependencies(executable file/library)
2.plugins


Maven Repository
==================
1.Local Repository: users/.m2 folder
2.Remote/central repository
https://mvnrepository.com/

=============================================================
TestCase:validate Google application title as Google
Step1: Open Browser with Google application
Step2: Get the actual title of application
Step3: Compare with expected title
Step4: As per comparison display Valid message 
Step5: Close the browser

Webdriver Browser based commands
======================================
1.get(url)
2.getTitle()
3.getCurrentUrl()
4.getPageSource()
5.close(): close the current/active window of browser
6.quit(): close all open window by selenium
7.getWindowHandle()
8.getWindowHandles()

Selenium Exceptions
==================
1.InvalidArgumentException: invalid argument= wrong url address


WebDriver Navigation commands
===================================
Selenium Provides Navigation interface

driver.navigate():Navigate interface object

1.to(url): navigate to new url /app
--------------------------------------
driver.navigate().to(url)

2.back()
---------------------------------
driver.navaigate().back()

3.forward()
----------------------------
driver.navigate().forward()

4.refresh()
-------------------------------
driver.navigate().refresh()

========================================================
How to automate any webelement?
=================================
Step1:Get the address of webelement from web page & identify webelement
Step2: perform actions on that webelement

 
What is WebElement?
==========================
In general all WEBUI called webelement.
example:
textbox,searchbox,dropdown,link,button,checkbox...etc

In Selenium WebElement is interface

Step1:Get the address of webelement from web page & identify webelement
------------------------------------------------------------------------
In selenium we can find the address of webelement using Locator

What is Locators:
---------------------
Address of  a webelement from webpage

Selenium Support total 8 locators
====================================
1.By id
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic 
------------
7.By cssSelector
8.By xpath

What is By?
----------------
By is class in selenium to get the locators

In selenium to identify any webelement
==========================================
1.findElement()
---------------------
- this method identifies one single webelement
- this method return WebElement interface object
- this method throws the exception NoSuchElementException if element not found 

2.findElements()
---------------------
- this method identifies multiple weblements
- this method return List<Webelement>
- this method never throws any exception if element not found 

===============================================
Element validation methods
================================
1.isDisplayed()
2.isEnabled()
3.isSelected()

Actions
====================
textbox,searchbox--->pass data--->sendKeys("data",Keys.Keyboard key)
button,link,checkbox,radio button--->click---->click()
to clear the text written---->clear()

============================================
How to automate any hyperlink/link
====================================
<a href="https://www.google.com"> Google App </a>
		<a>                      link text </a>
1.linkText()-full text
------------------------------------------
driver.findElement(By.linkText("Google App"))

2.partialLinkText() -partial match
--------------------------------------
driver.findElement(By.partialLinkText("App"))




---------------------
3-10-2024
==================
Synchronization Issue in Selenium
=======================================
Time mapping issue between tool and application

Selenium Provides Dynamic wait
======================================
1.Implicit
================
- It is global wait
applicable to all webelements from script
driver.manage().timeouts().implicitlyWait(Duration.ofseconds(10));



2.Explicit
=================
- It is applicable to single webelement as per there condition

1.WebDriverWait class
2.FluentWait Class
==================================================
By className
==========================
InvalidSelectorException: Compound class names not permitted

class="oxd-button oxd-button--medium oxd-button--main orangehrm-login-button"

		class1       class2             class3           class4
		
Identify class name which match to the element and use the same

================================================================
By tagName
=================

Number of images
Number of input boxes
Number of Links 

findElements()

==================================
WebElement Method
=================
1.getText()
==================
- to get the text of any element we use this method
<tagname>text</tagname>
- html inner text also we can find out using getText()


2.getAttribute(attribute)
==================
This method return value for that attribute
==========================================================
Dynamic Locators
=====================
1.By cssSelector
2.By xpath

cssSelector
==================
What is Css?
---------------------
It is cascaded style sheet language for webpage to provide styles to the webelement


what is cssSelector?
=========================
It is locator to locate the webelement based on there css properties
-cssSelector is faster than xpath(as we can travel only in one direction Parent--->child)
-cssSelector not support any method
-cssSelector not support axies

1.tagname with id
=========================
Syntax:
=============
tagname#id

<input id="user-name">

input#user-name

2.tagname with attribute
==========================
syntax:
=======
tagname[attribute='value']

<input placeholder="Password">
input[placeholder='Password']

3.tagname with className
===============================
Syntax:
===========
tagname.className

<input type="submit" class="btn_action" id="login-button" value="LOGIN">

input.btn_action

4.tagname with id,classname,attribute
==================================
Syntax:
=============
tagname#id.classname[attribute='value']

<input type="submit" class="btn_action" id="login-button" value="LOGIN">

input#login-button.btn_action[value='LOGIN']

cssSelectors pattern
=============
* contains-partail match
=====================

Syntax:
=============
tagname[attribute *='partial value']

placeholder="Username"

input[placeholder *='User']
input[placeholder *='name']

^ startswith(prefix)
==================
input[placeholder ^='User']

$ endswith(suffix)
=================
input[placeholder $='name']

=================================================
DevOps
==================
It is a process/culture where one team is able to manage complete SDLC/CICD process
Development team
================
BA
DEV
QA
SA

Operational Team
===================
Admin
sys admin
n/w admin
db admin

===================================================
By xpath
=================
xpath is path of the element from xml/html page
Xpath identify element by directly DOm

What is DOM
================
Document object model

HTML DOM
===================
<html>----------------root node
<head>
<title> Application</title>
</head>
<body>
<input>
<a>------------------element
<div>
</body>
</html>
===============================================
Types of Xpath
=================
1.Absolute xpath(Full xpath)
=====================
- identify element from root node
- It starts with '/'

/html/body/section/div/div/div/div/form/div[1]/input

2.Relative xpath(partial xpath)
======================
- identify element from its relative property
- It starts with '//'

//*[@id="email-id"]

* Any tag
=================
Syntax:
===============
//tagname[@attribute='value']

===========================================
xpath operator
=====================
1.and
==============
syntax:
===========
//tagname[@attribute1='value' and @attribute2='value']

//input[@name='firstname' and @class='form-control']

2.or
==========
syntax:
===========
//tagname[@attribute1='value' or @attribute2='value']

//input[@name='firstname' or @class='form-control']
============================================================
xpath indexing/position()
=============================
Syntax:
=============
(xpath)[index]

Syntax:
=============
(xpath)[position()=index]

============================================================
9-10-2024
=============
xpath Mathods
================
1.text()
=============
text never work with white space

syntax:
==========
//tagname[text()='text']

<a>Mobiles</a>

//a[text()='Mobiles']

2.normalize-space()
=======================
this method identify text and ignore white space

syntax:
=======
//tagname[normalize-space()='text']


3.contains()-partial match
=================
Syntax:
============
//tagname[contains(@attribute,'partial value')]

or
//tagname[contains(text(),'text')]


//input[contains(@id,'tabsearchtex')]


4.starts-with()-prefix value
================
Syntax:
============
//tagname[starts-with(@attribute,'prefix value')]

or
//tagname[starts-with(text(),'prefix text')]
=============================================================
Xpath Axies
================
1.Following
===================
Syntax:
=============
//tagname[@attribute1='value']//following::tagname of following element
 
 //input[@id='twotabsearchtextbox']//following::a[normalize-space()='Electronics']
2.preceding
===================
//tagname[@attribute1='value']//preceding::tagname of following element

=====================================================

TestNg Installation
======================
How to automate any dropdown
================================
1.Select tag based dropdown
-------------------------------
Selenium provides Select class

Is dropdown support multiple selection?
-------------------------------------
isMultiple()

single selection
------------------
1.selectByIndex()
2.selectByValue()
3.selectByVisibleText()
To get all options
------------------------
getOptions()
=======================
2.Bootstrap/javascript/dynamic
---------------------------------
xpath

========================================================
How to automate 
=================
Multiple Window 
=====================
1.getWindowHandle()
2.getWnodwHandles()
3.switchTo()

calendar
==================
done
===============================================
Alerts
============
Selenium provides Alert interface

Alert at=driver.switchTo().alert();

1.Ok===>accept()
2.cancel===>dismiss()
3.Prompt alert-->pass data-->sendKeys()
4.to get the alert text- getText()

================================
frame
===========
Html document inside another html document is called frame
<frame>
<iframe>

driver.swicthTo().frame(index)
driver.swicthTo().frame(id/name)
driver.swicthTo().frame(WebElement)

============================================
Webtable
=============
done

Actions class
====================
mouse operations
1.right click--->contextClick()
2.double click----->doubleClick()
3.drag n drop---->dragAndDrop(src,dest)
4.mouse over---->moveToElement()

After Diwali
-----------------------
2.Explicit
=================
- It is applicable to single webelement as per there condition

1.WebDriverWait class
2.FluentWait Class

JavascriptExecutor
=============================

Framework
=================
1.testng

================


data 


2.cucumber


Hybrid framework design

Reports



































































































































